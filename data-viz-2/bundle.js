(function (vega, vegaLite, vl, vegaTooltip, d3) {
  "use strict";

  vega = vega && Object.prototype.hasOwnProperty.call(vega, "default") ? vega["default"] : vega;
  vegaLite = vegaLite && Object.prototype.hasOwnProperty.call(vegaLite, "default") ? vegaLite["default"] : vegaLite;
  vl = vl && Object.prototype.hasOwnProperty.call(vl, "default") ? vl["default"] : vl;

  // Appearance customization to improve readability.
  // See https://vega.github.io/vega-lite/docs/
  const dark = "#3e3c38";
  const config = {
    axis: {
      domain: false,
      tickColor: "lightGray",
    },
    style: {
      "guide-label": {
        fontSize: 20,
        fill: dark,
      },
      "guide-title": {
        fontSize: 30,
        fill: dark,
      },
    },
  };

  const csvUrl =
    "https://gist.githubusercontent.com/mbdev3/6d961a5294622504ce5d2ffb9328e489/raw/4f99f974418ecb5bbf060ace733488be100ab97a/popular%2520programming%2520languages%25202022.csv";

  const getData = async () => {
    const data = await d3.csv(csvUrl);

    // Have a look at the attributes available in the console!
    console.log(data[0]);

    return data;
  };

  const viz = vl
    .markBar({
      opacity: 1,
    })
    .encode(
      vl.x().fieldN("Programming language").sort("-y"),
      vl.y().fieldQ("Share").title("share by %"),
      vl.color().fieldN("Programming language").title(""),
      vl.tooltip().fieldN("Programming language")
    );

  vl.register(vega, vegaLite, {
    view: { renderer: "svg" },
    init: (view) => {
      view.tooltip(new vegaTooltip.Handler().call);
    },
  });

  const run = async () => {
    const marks = viz
      .data(await getData())
      .width(window.innerWidth)
      .height(window.innerHeight)
      .autosize({ type: "fit", contains: "padding" })
      .config(config);

    document.body.appendChild(await marks.render());
  };
  run();
})(vega, vegaLite, vl, vegaTooltip, d3);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsImdldERhdGEuanMiLCJ2aXouanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcHBlYXJhbmNlIGN1c3RvbWl6YXRpb24gdG8gaW1wcm92ZSByZWFkYWJpbGl0eS5cbi8vIFNlZSBodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL1xuY29uc3QgZGFyayA9ICcjM2UzYzM4JztcbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIGF4aXM6IHtcbiAgICBkb21haW46IGZhbHNlLFxuICAgIHRpY2tDb2xvcjogJ2xpZ2h0R3JheSdcbiAgfSxcbiAgc3R5bGU6IHtcbiAgICBcImd1aWRlLWxhYmVsXCI6IHtcbiAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgIGZpbGw6IGRhcmtcbiAgICB9LFxuICAgIFwiZ3VpZGUtdGl0bGVcIjoge1xuICAgICAgZm9udFNpemU6IDMwLFxuICAgICAgZmlsbDogZGFya1xuICAgIH1cbiAgfVxufTsiLCJpbXBvcnQgeyBjc3YgfSBmcm9tICdkMyc7XG5cbmNvbnN0IGNzdlVybCA9ICdodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21iZGV2My82ZDk2MWE1Mjk0NjIyNTA0Y2U1ZDJmZmI5MzI4ZTQ4OS9yYXcvNGY5OWY5NzQ0MThlY2I1YmJmMDYwYWNlNzMzNDg4YmUxMDBhYjk3YS9wb3B1bGFyJTI1MjBwcm9ncmFtbWluZyUyNTIwbGFuZ3VhZ2VzJTI1MjAyMDIyLmNzdic7XG5cbmV4cG9ydCBjb25zdCBnZXREYXRhID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBkYXRhID0gYXdhaXQgY3N2KGNzdlVybCk7XG4gIFxuICAvLyBIYXZlIGEgbG9vayBhdCB0aGUgYXR0cmlidXRlcyBhdmFpbGFibGUgaW4gdGhlIGNvbnNvbGUhXG4gIGNvbnNvbGUubG9nKGRhdGFbMF0pO1xuXG4gIHJldHVybiBkYXRhO1xufTsiLCJpbXBvcnQgdmwgZnJvbSAndmVnYS1saXRlLWFwaSc7XG5cbmV4cG9ydCBjb25zdCB2aXogPSB2bFxuICAubWFya0Jhcih7XG4gICBcbiAgICBvcGFjaXR5OiAxXG4gIH0pXG4gIC5lbmNvZGUoXG4gICBcbiAgICB2bC54KCkuZmllbGROKCdQcm9ncmFtbWluZyBsYW5ndWFnZScpLnNvcnQoJy15JyksXG4gICAgIHZsLnkoKS5maWVsZFEoJ1NoYXJlJykudGl0bGUoXCJzaGFyZSBieSAlXCIpLFxuICAgXHR2bC5jb2xvcigpLmZpZWxkTignUHJvZ3JhbW1pbmcgbGFuZ3VhZ2UnKS50aXRsZShcIlwiKSxcbiAgIFx0dmwudG9vbHRpcCgpLmZpZWxkTignUHJvZ3JhbW1pbmcgbGFuZ3VhZ2UnKVxuICApOyIsImltcG9ydCB2ZWdhIGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHZlZ2FMaXRlIGZyb20gJ3ZlZ2EtbGl0ZSc7XG5pbXBvcnQgdmwgZnJvbSAndmVnYS1saXRlLWFwaSc7XG5pbXBvcnQgeyBIYW5kbGVyIH0gZnJvbSAndmVnYS10b29sdGlwJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGdldERhdGEgfSBmcm9tICcuL2dldERhdGEnO1xuaW1wb3J0IHsgdml6IH0gZnJvbSAnLi92aXonO1xuXG52bC5yZWdpc3Rlcih2ZWdhLCB2ZWdhTGl0ZSwge1xuICB2aWV3OiB7IHJlbmRlcmVyOiAnc3ZnJyB9LFxuICBpbml0OiB2aWV3ID0+IHsgdmlldy50b29sdGlwKG5ldyBIYW5kbGVyKCkuY2FsbCk7IH1cbn0pO1xuXG5jb25zdCBydW4gPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IG1hcmtzID0gdml6XG4gICAgLmRhdGEoYXdhaXQgZ2V0RGF0YSgpKVxuICAgIC53aWR0aCh3aW5kb3cuaW5uZXJXaWR0aClcbiAgICAuaGVpZ2h0KHdpbmRvdy5pbm5lckhlaWdodClcbiAgICAuYXV0b3NpemUoeyB0eXBlOiAnZml0JywgY29udGFpbnM6ICdwYWRkaW5nJyB9KVxuICAgIC5jb25maWcoY29uZmlnKTtcbiAgXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYXdhaXQgbWFya3MucmVuZGVyKCkpO1xufTtcbnJ1bigpOyJdLCJuYW1lcyI6WyJjc3YiLCJIYW5kbGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0VBQUE7RUFDQTtFQUNBLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQztFQUNoQixNQUFNLE1BQU0sR0FBRztFQUN0QixFQUFFLElBQUksRUFBRTtFQUNSLElBQUksTUFBTSxFQUFFLEtBQUs7RUFDakIsSUFBSSxTQUFTLEVBQUUsV0FBVztFQUMxQixHQUFHO0VBQ0gsRUFBRSxLQUFLLEVBQUU7RUFDVCxJQUFJLGFBQWEsRUFBRTtFQUNuQixNQUFNLFFBQVEsRUFBRSxFQUFFO0VBQ2xCLE1BQU0sSUFBSSxFQUFFLElBQUk7RUFDaEIsS0FBSztFQUNMLElBQUksYUFBYSxFQUFFO0VBQ25CLE1BQU0sUUFBUSxFQUFFLEVBQUU7RUFDbEIsTUFBTSxJQUFJLEVBQUUsSUFBSTtFQUNoQixLQUFLO0VBQ0wsR0FBRztFQUNILENBQUM7O0VDaEJELE1BQU0sTUFBTSxHQUFHLDRLQUE0SyxDQUFDO0FBQzVMO0VBQ08sTUFBTSxPQUFPLEdBQUcsWUFBWTtFQUNuQyxFQUFFLE1BQU0sSUFBSSxHQUFHLE1BQU1BLE1BQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUNqQztFQUNBO0VBQ0EsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCO0VBQ0EsRUFBRSxPQUFPLElBQUksQ0FBQztFQUNkLENBQUM7O0VDVE0sTUFBTSxHQUFHLEdBQUcsRUFBRTtFQUNyQixHQUFHLE9BQU8sQ0FBQztFQUNYO0VBQ0EsSUFBSSxPQUFPLEVBQUUsQ0FBQztFQUNkLEdBQUcsQ0FBQztFQUNKLEdBQUcsTUFBTTtFQUNUO0VBQ0EsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztFQUNwRCxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztFQUMvQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO0VBQ3ZELElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztFQUMvQyxHQUFHOztFQ0xILEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtFQUM1QixFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7RUFDM0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJQyxtQkFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtFQUNyRCxDQUFDLENBQUMsQ0FBQztBQUNIO0VBQ0EsTUFBTSxHQUFHLEdBQUcsWUFBWTtFQUN4QixFQUFFLE1BQU0sS0FBSyxHQUFHLEdBQUc7RUFDbkIsS0FBSyxJQUFJLENBQUMsTUFBTSxPQUFPLEVBQUUsQ0FBQztFQUMxQixLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0VBQzdCLEtBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7RUFDL0IsS0FBSyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztFQUNuRCxLQUFLLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUNwQjtFQUNBLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztFQUNsRCxDQUFDLENBQUM7RUFDRixHQUFHLEVBQUU7Ozs7In0=
